{"version":3,"sources":["components/TaskItem.tsx","components/TaskList.tsx","components/TaskInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskItem","task","handleDone","handleDelete","className","done","type","onClick","defaultChecked","title","TaskList","tasks","setTasks","prev","map","t","id","filter","length","key","TaskInput","useState","inputTitle","setInputTitle","count","setCount","value","onChange","e","target","App","data","localStorage","getItem","initialState","JSON","parse","useEffect","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNA8BeA,EArBmB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAErD,OACE,wBAAIC,UAAWH,EAAKI,KAAO,OAAS,IAClC,+BACE,2BACEC,KAAK,WACLF,UAAU,iBACVG,QAAS,kBAAML,EAAWD,IAC1BO,eAAgBP,EAAKI,OAEvB,0BAAMD,UAAU,kBAAkBH,EAAKQ,QAEzC,4BACEF,QAAS,kBAAMJ,EAAaF,IAC5BG,UAAU,iBAFZ,kBCsBSM,EAnCmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAEpCV,EAAa,SAACD,GAClBW,GAAS,SAAAC,GAAI,OAAIA,EAAKC,KAAI,SAAAC,GAAC,OACzBA,EAAEC,KAAOf,EAAKe,GAAd,eACSf,EADT,CACeI,MAAOJ,EAAKI,OACvBU,SAIFZ,EAAe,SAACF,GACpBW,GAAS,SAAAC,GAAI,OAAIA,EAAKI,QAAO,SAAAF,GAAC,OAC5BA,EAAEC,KAAOf,EAAKe,UAIlB,OACE,yBAAKZ,UAAU,SAEXO,EAAMO,QAAU,EAAI,+EAClB,wBAAId,UAAU,aACXO,EAAMG,KAAI,SAAAb,GAAI,OACb,kBAAC,EAAD,CACEkB,IAAKlB,EAAKe,GACVf,KAAMA,EACNE,aAAcA,EACdD,WAAYA,U,OCabkB,EAxCoB,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,SAAUD,EAAY,EAAZA,MAAY,EACtBU,mBAAiB,IADK,mBACnDC,EADmD,KACvCC,EADuC,OAEhCF,mBAAiBV,EAAMO,OAAS,GAFA,mBAEnDM,EAFmD,KAE5CC,EAF4C,KAuB1D,OACE,6BACE,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,SACb,2BACEE,KAAK,OACLF,UAAU,QACVsB,MAAOJ,EACPK,SA1BgB,SAACC,GACzBL,EAAcK,EAAEC,OAAOH,UA2BjB,4BAAQnB,QAxBK,WACnBkB,EAASD,EAAQ,GAQjBZ,EAAS,CANa,CACpBI,GAAIQ,EACJf,MAAOa,EACPjB,MAAM,IAGA,mBAAcM,KACtBY,EAAc,KAcuBnB,UAAU,kBAAzC,oBClBK0B,G,MAjBO,WACpB,IAAIC,EAAoBC,aAAaC,QAAQ,SACvCC,EAAuBH,EAAOI,KAAKC,MAAML,GAAQ,GAF7B,EAGAV,mBAASa,GAHT,mBAGnBvB,EAHmB,KAGZC,EAHY,KAS1B,OAJAyB,qBAAU,WACRL,aAAaM,QAAQ,QAASH,KAAKI,UAAU5B,OAI7C,6BACE,kBAAC,EAAD,CAAWA,MAAOA,EAAOC,SAAUA,IACnC,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,SAAUA,OCNpB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.35af91e6.chunk.js","sourcesContent":["import React from 'react'\nimport { Task } from '../Types'\n\ntype Props = {\n  task: Task\n  handleDone: (task: Task) => void\n  handleDelete: (task: Task) => void\n}\n\nconst TaskItem: React.FC<Props> = ({ task, handleDone, handleDelete }) => {\n\n  return (\n    <li className={task.done ? 'done' : ''}>\n      <label>\n        <input\n          type=\"checkbox\"\n          className=\"checkbox-input\"\n          onClick={() => handleDone(task)}\n          defaultChecked={task.done}\n        />\n        <span className=\"checkbox-label\">{task.title}</span>\n      </label>\n      <button\n        onClick={() => handleDelete(task)}\n        className=\"btn is-delete\"\n      >削除</button>\n    </li>\n  )\n}\n\nexport default TaskItem","import React from 'react'\nimport TaskItem from './TaskItem'\nimport { Task } from '../Types'\n\ntype Props = {\n  tasks: Task[]\n  setTasks: React.Dispatch<React.SetStateAction<Task[]>>\n}\n\nconst TaskList: React.FC<Props> = ({ tasks, setTasks }) => {\n\n  const handleDone = (task: Task) => {\n    setTasks(prev => prev.map(t =>\n      t.id === task.id\n        ? { ...task, done: !task.done }\n        : t\n    ))\n  }\n\n  const handleDelete = (task: Task) => {\n    setTasks(prev => prev.filter(t =>\n      t.id !== task.id\n    ))\n  }\n\n  return (\n    <div className=\"inner\">\n      {\n        tasks.length <= 0 ? '登録されたTODOはありません。' :\n          <ul className=\"task-list\">\n            {tasks.map(task => (\n              <TaskItem\n                key={task.id}\n                task={task}\n                handleDelete={handleDelete}\n                handleDone={handleDone}\n              />\n            ))}\n          </ul>\n      }\n    </div>\n  )\n}\n\nexport default TaskList","import React, { useState } from 'react'\nimport { Task } from '../Types'\n\ntype Props = {\n  setTasks: React.Dispatch<React.SetStateAction<Task[]>>\n  tasks: Task[]\n}\n\nconst TaskInput: React.FC<Props> = ({ setTasks, tasks }) => {\n  const [inputTitle, setInputTitle] = useState<string>('')\n  const [count, setCount] = useState<number>(tasks.length + 1)\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputTitle(e.target.value)\n  }\n\n  const handleSubmit = () => {\n    setCount(count + 1)\n\n    const newTask: Task = {\n      id: count,\n      title: inputTitle,\n      done: false\n    }\n\n    setTasks([newTask, ...tasks])\n    setInputTitle('')\n\n  }\n\n  return (\n    <div>\n      <div className=\"inputForm\">\n        <div className=\"inner\">\n          <input\n            type=\"text\"\n            className=\"input\"\n            value={inputTitle}\n            onChange={handleInputChange}\n          />\n          <button onClick={handleSubmit} className=\"btn is-primary\">追加</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TaskInput","import React, { useState, useEffect } from 'react'\nimport TaskList from './components/TaskList'\nimport TaskInput from './components/TaskInput'\nimport { Task } from './Types'\nimport './App.css'\n\nconst App: React.FC = () => {\n  let data: string|null = localStorage.getItem('tasks');\n  const initialState: Task[] = data ? JSON.parse(data) : []\n  const [tasks, setTasks] = useState(initialState)\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  })\n\n  return (\n    <div>\n      <TaskInput tasks={tasks} setTasks={setTasks} />\n      <TaskList tasks={tasks} setTasks={setTasks} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}